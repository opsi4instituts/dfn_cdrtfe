; Ergebnis ist StringList (mehrere Einträge möglich);
; in einer Zeile werden drei Ergebnisse mit "|" abgetrennt geliefert: Registrykey (mit Pfad) | Bereich Registry (kann direkt getRegistryValue übergeben werden | DisplayName
; z.B. HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Test64|64bit|Test Registry Entry64
Set $ResultList$ = SearchRegistryUninstallKeys($ProductId$)

Switch count ($ResultList$)
	Case "0"
		comment "No installations of " + $ProductName$ + " found in registry. Nothing to do"
	EndCase
	Case "1"
		Message "Uninstalling " + $ProductName$ + " 32 Bit..."
		Set $RegId$ = takeString (0,splitString(takeString(0, $ResultList$),"|"))
		Set $RegBitScope$ = takeString (1,splitString(takeString(0,$ResultList$), '|'))
		Set $DisplayName$ = takeString (2,splitString(takeString(0,$ResultList$), '|'))
		
		Set $UninstallProgram$ = GetRegistryValue($RegId$, "UninstallString", $RegBitScope$)
		
		if (contains(lower($UninstallProgram$), "uninstall.vbs") AND contains($DisplayName$, "OPSI") )
			comment "Found a version which was installed by OPSI and just copying the files (like we do)"
			Set $UnInstallDir$ = GetRegistryValue($RegId$, "InstallLocation", $RegBitScope$)
			Files_uninstall
			Registry_uninstall /32Bit
			LinkFolder_uninstall_programs
		endif
		
		if (contains(lower($UninstallProgram$), "msiexec.exe"))
			comment "Found a version which was installed by MSI"
			; exitcode library von UIB (siehe C:\program files(x86)\opsi.org\opsi-client-agent\opsi-winst\lib) mit 'local functions'
			importLib "uib_exitcode.opsiscript::isMsiExitcodeFatal"
			; für MSI wird nur der eigentliche Regkey (ohne Pfad) benötigt
			Set $RegId$ = takeString (-1,splitString($RegId$,"\"))
			Winbatch_uninstall_msi
			Set $ExitCode$ = getLastExitCode
			if stringToBool(isMsiExitcodeFatal($ExitCode$, "True", $ErrorString$))
				isFatalError
			endif
		endif
		
		if (contains(lower($UninstallProgram$), "unins000.exe"))
			comment "Found a version which was installed by Inno installer"
			; exitcode library von UIB (siehe C:\program files(x86)\opsi.org\opsi-client-agent\opsi-winst\lib) mit 'local functions'
			importLib "uib_exitcode.opsiscript::isInnoExitcodeFatal"
			; entferne störende Anführungszeichen von $UninstallProgram$
			Set $UninstallProgram$ = unquote($UninstallProgram$,'"')
			Winbatch_uninstall_inno
			Set $ExitCode$ = getLastExitCode
			if stringToBool(isInnoExitcodeFatal($ExitCode$, "True", $ErrorString$))
				isFatalError
			endif			
		endif
		
		if $DesktopLink$ = "true"
			comment "Delete common desktop link"
			Linkfolder_delete_desktoplink	
		endif

		comment "include custom post deinstall file"
		set $CustomPostDeinstall$ = getProductProperty("custom-post-deinstall","none")
		if not ($CustomPostDeinstall$ = "none")
			if FileExists("%ScriptPath%\custom\" + $CustomPostDeinstall$)
				include_insert "%ScriptPath%\custom\" + $CustomPostDeinstall$
			endif
		endif
	EndCase
	DefaultCase
		logError "Found more than one installation! This case is not intended yet in this script! Stop now."
		isFatalError
	EndCase
EndSwitch  

[Files_uninstall]
delete -sf $UnInstallDir$

[Linkfolder_delete_desktoplink]
set_basefolder common_desktopdirectory
set_subfolder ""
delete_element $ProductName$
	
[LinkFolder_uninstall_programs]
set_basefolder common_startmenu
delete_subfolder "Programs\$ProductName$"
	
[Registry_uninstall]
deletekey [$RegId$]

[Winbatch_uninstall_msi]
msiexec /qn /x $RegId$ REBOOT=ReallySuppress

[Winbatch_uninstall_inno]
"$UninstallProgram$" /VERYSILENT /norestart /nocancel /SUPPRESSMSGBOXES